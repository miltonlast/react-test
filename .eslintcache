[{"C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\index.tsx":"1","C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\components\\Navbar.tsx":"2","C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\router\\AppRouter.tsx":"3","C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\components\\Episodes.tsx":"4","C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\components\\Home.tsx":"5","C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\components\\Character.tsx":"6","C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\components\\Death.tsx":"7","C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\components\\Episode.tsx":"8"},{"size":223,"mtime":1610947092247,"results":"9","hashOfConfig":"10"},{"size":573,"mtime":1610850525108,"results":"11","hashOfConfig":"10"},{"size":631,"mtime":1610850538785,"results":"12","hashOfConfig":"10"},{"size":2352,"mtime":1610965741928,"results":"13","hashOfConfig":"10"},{"size":3837,"mtime":1610971594807,"results":"14","hashOfConfig":"10"},{"size":1034,"mtime":1610971860184,"results":"15","hashOfConfig":"10"},{"size":2220,"mtime":1610900186546,"results":"16","hashOfConfig":"10"},{"size":622,"mtime":1610963080483,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ao272o",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\index.tsx",[],["37","38"],"C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\components\\Navbar.tsx",[],"C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\router\\AppRouter.tsx",[],"C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\components\\Episodes.tsx",["39","40","41"],"import axios from 'axios-observable';\r\nimport React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { map } from 'rxjs/operators';\r\nimport { IEpisode } from '../interfaces/IEpisode';\r\nimport Episode from './Episode';\r\n\r\n\r\nconst Episodes: React.FC = (): JSX.Element => {\r\n    const [season, setSeason] = useState(0);\r\n    const [responseData, setResponseData] = useState<Array<IEpisode>>([]);\r\n    const handleChange = (event: ChangeEvent<{ value: string }>): void => {\r\n        const value = Number(event.currentTarget.value);\r\n        fetchEpisodes(value);\r\n        setSeason(value);\r\n    }    \r\n\r\n    useEffect(() => {\r\n        fetchEpisodes(season);\r\n    }, []);\r\n\r\n    const fetchEpisodes = (seasonValue: number) => {\r\n        axios.get<Array<IEpisode>>('https://www.breakingbadapi.com/api/episodes').pipe(\r\n            map(x => {\r\n                return (seasonValue == 0)\r\n                    ? x.data\r\n                    : x.data.filter(y => y.season == seasonValue);\r\n            })\r\n        ).subscribe(response => setResponseData(response));\r\n    }\r\n\r\n    return (\r\n        <div className=\"row col-md-12\">\r\n            <div className=\"container my-lg-5\">\r\n                <h5>FILTER</h5>\r\n                <div>\r\n                    <div className=\"form-group col-md-2\" style={{ paddingLeft: '0px' }}>\r\n                        <select className=\"form-control\" name=\"city\" onChange={handleChange}>\r\n                            <option value=\"0\">All Seasons</option>\r\n                            <option value=\"1\">Season 1</option>\r\n                            <option value=\"2\">Season 2</option>\r\n                            <option value=\"3\">Season 3</option>\r\n                            <option value=\"4\">Season 4</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <h5>Total Episodes: {responseData.length}</h5>\r\n                <div className=\"row\">\r\n                    {\r\n                        responseData.map((x, i) => {\r\n                            return <div className=\"col-md-3 mt-sm-3\" key={x.episode_id}>\r\n                                <Episode item={x} key={i} />\r\n                            </div>\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Episodes;","C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\components\\Home.tsx",["42"],"import axios from 'axios-observable';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { filter } from 'rxjs/operators';\r\nimport { ICharacter } from '../interfaces/ICharacter';\r\nimport Character from './Character';\r\nimport Death from './Death';\r\n\r\nconst styles = {\r\n    borderRight: '1px solid #d0d0d0',\r\n    paddingRight: '20px'\r\n};\r\n\r\nconst Home: React.FC = (): JSX.Element => {\r\n    const [loaded, setIsLoaded] = useState(false);\r\n    const [responseData, setResponseData] = useState<Array<ICharacter>>([]);\r\n    const handleSort = (sortBy: string): void => {\r\n        switch (sortBy) {\r\n            case 'name':\r\n                const name = sanizateObject(responseData.sort((a, b) => (a.name > b.name) ? 1 : -1));\r\n                setResponseData([...name, ...name]);\r\n                break;\r\n            case 'birthday':\r\n                const birthday = sanizateObject(responseData.sort((a, b) => (new Date(a.birthday) > new Date(b.birthday)) ? 1 : -1));\r\n                setResponseData([...birthday, ...birthday]);\r\n                break;\r\n            case 'portrayed':\r\n                const portrayed = sanizateObject(responseData.sort((a, b) => (a.portrayed > b.portrayed) ? 1 : -1));\r\n                setResponseData([...portrayed, ...portrayed]);\r\n                break;\r\n        }\r\n    }\r\n    const sanizateObject = (data: Array<ICharacter>): Array<ICharacter> => {\r\n        return data.filter((thing, index, self) =>\r\n            index === self.findIndex((t) => (\r\n                t.char_id === thing.char_id\r\n            ))\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchCharacters(0);\r\n    }, []);\r\n\r\n\r\n    const fetchCharacters = (count: number) => {\r\n        axios.get<Array<ICharacter>>('https://www.breakingbadapi.com/api/characters', {\r\n            params: {\r\n                limit: 6,\r\n                offset: count\r\n            }\r\n        }).pipe(\r\n            filter(x => !!x)\r\n        ).subscribe(response => {\r\n            setResponseData([...responseData, ...response.data]);\r\n            setIsLoaded(true);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"row col-md-12\">\r\n            <div className=\"col-md-8\" style={styles}>\r\n                <div className=\"container my-lg-5\">\r\n                    <h5 className=\"jumbotron-heading\">SORT BY</h5>\r\n                    <div className=\"btn-group\">\r\n                        <button type=\"button\" onClick={() => handleSort('name')} className=\"btn btn-dark\">Name</button>\r\n                        <button type=\"button\" onClick={() => handleSort('birthday')} className=\"btn btn-dark\">Birthday</button>\r\n                        <button type=\"button\" onClick={() => handleSort('portrayed')} className=\"btn btn-dark\">Portrayer</button>\r\n                    </div>\r\n                </div>\r\n                <InfiniteScroll\r\n                    dataLength={responseData.length}\r\n                    next={() => fetchCharacters(responseData.length + 6)}\r\n                    hasMore={true}\r\n                    loader=\"loading...\"\r\n                    className=\"col-md-12\"\r\n                >\r\n                    <div className=\"row\">\r\n                        {\r\n                            loaded\r\n                                ? responseData.map((x, i) => (\r\n                                    <div className=\"col-md-4 mt-sm-3\" key={i}>\r\n                                        <Character item={x} />\r\n                                    </div>\r\n                                ))\r\n                                : ''\r\n                        }\r\n                    </div>\r\n                </InfiniteScroll>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n                <Death />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\components\\Character.tsx",[],"C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\components\\Death.tsx",[],"C:\\Users\\usuario\\Desktop\\Nueva carpeta\\react-test\\src\\components\\Episode.tsx",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":19,"column":8,"nodeType":"49","endLine":19,"endColumn":10,"suggestions":"50"},{"ruleId":"51","severity":1,"message":"52","line":24,"column":37,"nodeType":"53","messageId":"54","endLine":24,"endColumn":39},{"ruleId":"51","severity":1,"message":"52","line":26,"column":51,"nodeType":"53","messageId":"54","endLine":26,"endColumn":53},{"ruleId":"47","severity":1,"message":"55","line":43,"column":8,"nodeType":"49","endLine":43,"endColumn":10,"suggestions":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'season'. Either include it or remove the dependency array.","ArrayExpression",["59"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'fetchCharacters'. Either include it or remove the dependency array.",["60"],"no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},{"desc":"63","fix":"64"},"Update the dependencies array to be: [season]",{"range":"65","text":"66"},"Update the dependencies array to be: [fetchCharacters]",{"range":"67","text":"68"},[673,675],"[season]",[1697,1699],"[fetchCharacters]"]